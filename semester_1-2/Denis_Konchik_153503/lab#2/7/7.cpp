// Лабораторная 2, задача 7. Выполнена: Кончик Д. С.

/*
Составить программу для решения уравнений трёх видов:
1. ax^4 + bx^2 + c = 0
2. ax^4 + bx^3 + cx^2 + bx + a = 0
3. x^3 + px + q = 0
*/

#include <iostream>
#include <cmath>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Rus");
    double a, b, c, D, p, q, t1, t2, Q, R, fi;
    double pi = acos(-1);
    int n;

    // Выбор уравнения
    cout << "1. ax^4 + bx^2 + c = 0\n" << "2. ax^4 + bx^3 + cx^2 + bx + a = 0\n" << "3. x^3 + px + q = 0\n";
    cout << "Введите номер уравнения (1 - 3): "; 
    cin >> n;

    switch (n) {
    case 1: 
        cout << "\nУравнение: ax^4 + bx^2 + c = 0\n";
        cout << "Введите коэффициенты уравнения (a, b, c) - действительные числа\n";

        // Ввод данных
        cout << "a = "; cin >> a;
        cout << "b = "; cin >> b;
        cout << "c = "; cin >> c;

        // Проверка всех коэффициентов на 0
        if (!a && !b && !c) {
            cout << "Ответ: все действительные числа";
            
        } else if (a != 0) { // Проверка коэффициента 'a' перед старшей степенью

            // a != 0. Решение уравнения вида: ax^4 + bx^2 + c = 0

            D = b * b - 4 * a * c; // Дискриминант

            if (D > 0) {
                // Замена переменной (x^2 -> t)
                t1 = (-b - sqrt(D)) / (2 * a); 
                t2 = (-b + sqrt(D)) / (2 * a);
              
                // Вычисление корней из t
                if (t1 < 0 && t2 < 0) {
                    cout << "Нет корней";
                } else {
                    cout << "Ответ: ";

                    if (t1 == 0 || t2 == 0)
                        cout << 0 << " ";
                    if (t1 > 0)
                        cout << sqrt(t1) << " " << -sqrt(t1) << " ";
                    if (t2 > 0)
                        cout << sqrt(t2) << " " << -sqrt(t2) << " ";
                    
                }

            } else if (D == 0) {
                // Корни при D = 0
                t1 = -b / (2 * a);

                // Вычисление корней из t
                if (t1 > 0)
                    cout << "Ответ: " << sqrt(t1) << " " << -sqrt(t1);
                else if (t1 == 0)
                    cout << "Ответ: " << 0;
                else
                    cout << "Нет корней";
                
            } else if (D < 0) {
                cout << "Нет корней";
            }

        } else {
            // a = 0. Решение уравнения вида: bx^2 + c = 0
            t1 = -c / b; // t1 = x^2

            // Вычисление корней из t
            if (t1 > 0)
                cout << "Ответ: " << sqrt(t1) << " " << -sqrt(t1);
            else if (t1 == 0)
                cout << "Ответ: " << 0;
            else
                cout << "Нет корней";
        }
        
        break; // конец (case 1)

    case 2:
        cout << "\nУравнение: ax^4 + bx^3 + cx^2 + bx + a = 0\n";
        cout << "Введите коэффициенты уравнения (a, b, c) - действительные числа\n";

        // Ввод данных
        cout << "a = "; cin >> a;
        cout << "b = "; cin >> b;
        cout << "c = "; cin >> c;

        // Проверка всех коэффициентов на 0
        if (!a && !b && !c) {
            cout << "Ответ: все действительные числа";
        } else if (a != 0) {  // Проверка старшего коэффициента 'a' на 0

            // Уравнение вида: ax^4 + bx^3 + cx^2 + bx + a = 0
            // Группируем, получаем: at^2 + bt + c - 2a = 0
            // t = x + 1/x

            D = b * b - 4 * a * (c - 2 * a);  // Дискриминант
            
            if (D > 0) {
                // Вычисление t
                t1 = (-b - pow(D, 0.5)) / (2 * a);
                t2 = (-b + pow(D, 0.5)) / (2 * a);

                // Получение корней из t (решение уравнений: x + 1/x = t)
                if (t1 * t1 < 4 && t2 * t2 < 4) { // (t * t - 4)  будет под кв. корнем
                    cout << "Нет корней";
                }
                else {
                    cout << "Ответ: ";

                    // a, b - возможные корни
                    if (t1 * t1 >= 4) { // (t1 * t1 - 4) будет под кв.корнем
                        a = (t1 - sqrt(t1 * t1 - 4)) / 2;
                        b = (t1 + sqrt(t1 * t1 - 4)) / 2;
                        if (a == b)
                            cout << a << " ";
                        else
                            cout << a << " " << b << " ";
                    }

                    if (t2 * t2 >= 4) { // (t2 * t2 - 4) будет под кв. корнем
                        a = (t2 - sqrt(t2 * t2 - 4)) / 2;
                        b = (t2 + sqrt(t2 * t2 - 4)) / 2;
                        if (a == b)
                            cout << a << " ";
                        else
                            cout << a << " " << b << " ";
                    }
                }

            }
            else if (D == 0) {
                // Корни при D = 0
                t1 = -b / (2 * a);
                
                // Вычисление корней из t
                if (t1 * t1 >= 4) // (t1 * t1 - 4) будет под кв. корнем
                    cout << "Ответ: " << (t1 - sqrt(t1 * t1 - 4)) / 2 << " " << (t1 + sqrt(t1 * t1)) / 2 << " ";
                else 
                    cout << "Нет корней";

            }
            else {
                cout << "Нет корней";
            }

        } else {

            /*  Уравнение вида: bx^3 + cx^2 + bx = 0
                Группируем: bx(x^2 + 1) + cx^2 = 0
                Один из корней: 0. Делим уравнение на x^2
                b(x + 1 / x) + c = 0
                t1 = x + 1 / x                                   */

            cout << "Ответ: " << 0 << " ";
            
            if (b != 0) { // 'b' в знаменателе
                // Получение 'x' из 't'
                t1 = -c / b;
                if (t1 * t1 >= 4) // (t1 * t1 - 4) будет под кв.корнем
                    cout << (t1 - sqrt(t1 * t1 - 4)) / 2 << " " << (t1 + sqrt(t1 * t1 - 4)) / 2 << " ";
            }
        }

        break; // конец (case 2)

    case 3: 
        cout << "\nУравнение: x^3 + px + q = 0\n";
        cout << "Введите коэффициенты уравнения (p, q) - действительные числа\n";

        // Ввод данных
        cout << "p = "; cin >> p;
        cout << "q = "; cin >> q;
        
        // Проверка коэффициентов на 0
        if (!p && !q) {
            cout << "Ответ: " << 0;
          
        } else {

            // Решение по тригонометрической ф. Виета (3 действ. корня)
            // Если не получается, идем через ф. Кардано
            Q = -p / 3;
            R = q / 2;

            a = R / sqrt(pow(Q, 3));
            b = pow(q, 2) / 4 + pow(p, 3) / 27;

            if (fabs(a) <= 1) { // 'a' под арккосинусом, -1 <= a <= 1
                // Считаем корни (a, b, c)

                fi = acos(a) / 3;

                a = -2 * sqrt(Q) * cos(fi);
                b = -2 * sqrt(Q) * cos(fi + 2 * pi / 3);

                c = -2 * sqrt(Q) * cos(fi - 2 * pi / 3);
                c = fabs(c) < 0.000001 ? 0 : c; // c - double, при вычислении выше не может стать 0

                cout << "Ответ: " << a << " " << b << " " << c;

            }
            else  if (b >= 0) { // b под кв. корнем
             // Решение по ф. Кардано (1 действ. корень)
                cout << "Ответ: " << cbrt(-q / 2 + sqrt(b)) + cbrt(-q / 2 - sqrt(b));

            }
            else {
                cout << "Нет корней";
            }
        }

        break; // конец (case 3)

    default:
        cout << "Некорректный номер уравнения";
    }
    
}

