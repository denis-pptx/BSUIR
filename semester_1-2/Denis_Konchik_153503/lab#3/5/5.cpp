// Лабораторная 3, задача 5. Выполнена: Кончик Д. С.

/*
Необходимо разложить функцию Y(x) из своего варианта в ряд S(x), затем с помощью полученного ряда найти 
значение функции и сравнить его со значением, вычисленным с помощью стандартных функций. 
Программа должна запросить у пользователя количество членов ряда (n), затем запросить у пользователя количество чисел, 
от которых он хочет посчитать функцию, затем пользователь вводит по одному числу (x от 0.1, до 1), 
программа считает значение функции с помощью ряда и с помощью стандартных функций и выводит оба значения. 
Использование <cmath> запрещено.

[14 Вариант]
*/

#include <iostream>
#include <cmath>
using namespace std;

int input_int();
double input_double();

int main()
{
    setlocale(LC_ALL, "Rus");
    int n, n_x, fact, f;
    double x, S, Y, x_power;

    // Ввод данных
    cout << "Количество членов ряда: "; n = input_int();
    cout << "Количество аргументов: "; n_x = input_int();

    cout << "\nS(x) - ряд, Y(x) - <cmath>\n";
    cout << "Введите аргументы функции (от 0.1 до 1).\n\n";

    for (int i = 1; i <= n_x; i++) {
        cout << "x" << i << " = "; x = input_double();
        
        // Вычисление S(x)
        S = 0; 
        x_power = x; // x^n
        fact = 6; // 3!
        f = 3;

        for (int j = 1; j <= n; j++) {

            S += (x_power * j * j) / fact; // Сумма

            x_power *= x; 

            fact *= (f + 1) * (f + 2); // Факториал
            f += 2;
        }
        

        // Вычисление Y(x)
        Y = 0.25 * ((x + 1) * sinh(sqrt(x)) / sqrt(x) - cosh(sqrt(x)));

        // Вывод результата
        cout << "S(x" << i << ") = " << S << "\n";
        cout << "Y(x" << i << ") = " << Y << "\n\n";
       
    }


    return 0;
}

int input_int() {
    int x;

    // Пока не будет введено корректное значение
    while (true) {
        cin >> x;

        // Проверка предыдущего извлечения данных из буфера
        // Извлечение неудачное / удачное, но остались неизвлеченные символы / число отрицательное
        if (cin.fail() || cin.peek() != '\n' || x <= 0) {
            cin.clear(); // Возвращение в обычный режим работы
            cin.ignore(10000, '\n'); // Игнор 'n' символов до Enter
            cout << "Повторите ввод: ";
        }
        else {
            return x;
        }
    }
}

double input_double() {
    double x;
    while (true) {
        cin >> x;
        if (cin.fail() || cin.peek() != '\n' || x < 0.1 || x > 1) {
            cin.clear(); 
            cin.ignore(10000, '\n');
            cout << "Повторите ввод: ";
        }
        else {
            return x;
        }
    }
}